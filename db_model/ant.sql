-- MySQL Script generated by MySQL Workbench
-- s√°b 01 oct 2016 17:06:20 AST
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema ant
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `ant` ;

-- -----------------------------------------------------
-- Schema ant
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `ant` DEFAULT CHARACTER SET utf8 ;
USE `ant` ;

-- -----------------------------------------------------
-- Table `ant`.`user_role`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ant`.`user_role` ;

CREATE TABLE IF NOT EXISTS `ant`.`user_role` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(40) NOT NULL,
  `description` VARCHAR(255) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ant`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ant`.`user` ;

CREATE TABLE IF NOT EXISTS `ant`.`user` (
  `id` VARCHAR(40) NOT NULL,
  `user_role_id` INT NOT NULL,
  `name` VARCHAR(80) NOT NULL,
  `email` VARCHAR(255) NOT NULL,
  `password` VARCHAR(255) NOT NULL,
  `password_last_update` DATETIME NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  INDEX `EMAIL` (`email` ASC),
  INDEX `fk_role_id_idx` (`user_role_id` ASC),
  CONSTRAINT `fk_user_role_id`
    FOREIGN KEY (`user_role_id`)
    REFERENCES `ant`.`user_role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ant`.`issue_category`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ant`.`issue_category` ;

CREATE TABLE IF NOT EXISTS `ant`.`issue_category` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(40) NOT NULL,
  `description` VARCHAR(255) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ant`.`role_permission`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ant`.`role_permission` ;

CREATE TABLE IF NOT EXISTS `ant`.`role_permission` (
  `id` VARCHAR(40) NOT NULL,
  `description` VARCHAR(255) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ant`.`user_role_permission`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ant`.`user_role_permission` ;

CREATE TABLE IF NOT EXISTS `ant`.`user_role_permission` (
  `user_role_id` INT NOT NULL,
  `role_permission_id` VARCHAR(40) NOT NULL,
  PRIMARY KEY (`user_role_id`, `role_permission_id`),
  INDEX `fk_role_permission_idx` (`role_permission_id` ASC),
  CONSTRAINT `fk_user_role_permission_user_role_id`
    FOREIGN KEY (`user_role_id`)
    REFERENCES `ant`.`user_role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_role_permission_role_permission_id`
    FOREIGN KEY (`role_permission_id`)
    REFERENCES `ant`.`role_permission` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ant`.`project`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ant`.`project` ;

CREATE TABLE IF NOT EXISTS `ant`.`project` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(40) NOT NULL,
  `description` VARCHAR(255) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ant`.`issue_status`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ant`.`issue_status` ;

CREATE TABLE IF NOT EXISTS `ant`.`issue_status` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(40) NOT NULL,
  `description` VARCHAR(255) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ant`.`issue_priority`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ant`.`issue_priority` ;

CREATE TABLE IF NOT EXISTS `ant`.`issue_priority` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(40) NOT NULL,
  `description` VARCHAR(255) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ant`.`issue_resolution`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ant`.`issue_resolution` ;

CREATE TABLE IF NOT EXISTS `ant`.`issue_resolution` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(40) NULL,
  `description` VARCHAR(255) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ant`.`issue`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ant`.`issue` ;

CREATE TABLE IF NOT EXISTS `ant`.`issue` (
  `id` INT ZEROFILL NOT NULL AUTO_INCREMENT,
  `project_id` INT NOT NULL,
  `category_id` INT NOT NULL,
  `title` VARCHAR(100) NOT NULL,
  `description` LONGTEXT NULL,
  `user_reporter` VARCHAR(40) NOT NULL,
  `user_assignee` VARCHAR(40) NULL,
  `user_last_update` VARCHAR(40) NOT NULL,
  `status_id` INT NOT NULL,
  `priority_id` INT NOT NULL,
  `resolution_id` INT NOT NULL,
  `date_created` DATETIME NOT NULL,
  `date_updated` DATETIME NOT NULL,
  `date_resolved` DATETIME NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_project_id_idx` (`project_id` ASC),
  INDEX `fk_issue_category_id_idx` (`category_id` ASC),
  INDEX `fk_issue_status_idx` (`status_id` ASC),
  INDEX `fk_user_reporter_idx` (`user_reporter` ASC),
  INDEX `fk_user_asignee_idx` (`user_assignee` ASC),
  INDEX `fk_issue_priority_idx` (`priority_id` ASC),
  INDEX `fk_issue_resolution_id_idx` (`resolution_id` ASC),
  INDEX `fk_issue_user_last_update_id_idx` (`user_last_update` ASC),
  CONSTRAINT `fk_issue_project_id`
    FOREIGN KEY (`project_id`)
    REFERENCES `ant`.`project` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_issue_category_id`
    FOREIGN KEY (`category_id`)
    REFERENCES `ant`.`issue_category` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_issue_status_id`
    FOREIGN KEY (`status_id`)
    REFERENCES `ant`.`issue_status` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_issue_user_reporter_id`
    FOREIGN KEY (`user_reporter`)
    REFERENCES `ant`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_issue_user_assigned_id`
    FOREIGN KEY (`user_assignee`)
    REFERENCES `ant`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_issue_priority_id`
    FOREIGN KEY (`priority_id`)
    REFERENCES `ant`.`issue_priority` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_issue_resolution_id`
    FOREIGN KEY (`resolution_id`)
    REFERENCES `ant`.`issue_resolution` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_issue_user_last_update_id`
    FOREIGN KEY (`user_last_update`)
    REFERENCES `ant`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ant`.`issue_comment`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ant`.`issue_comment` ;

CREATE TABLE IF NOT EXISTS `ant`.`issue_comment` (
  `issue_id` INT ZEROFILL NOT NULL,
  `user_id` VARCHAR(40) NOT NULL,
  `text` TEXT NOT NULL,
  `date` DATETIME NOT NULL,
  INDEX `fk_issue_id_idx` (`issue_id` ASC),
  INDEX `fk_user_id_idx` (`user_id` ASC),
  CONSTRAINT `fk_comment_issue_id`
    FOREIGN KEY (`issue_id`)
    REFERENCES `ant`.`issue` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_comment_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `ant`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ant`.`issue_history`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ant`.`issue_history` ;

CREATE TABLE IF NOT EXISTS `ant`.`issue_history` (
  `user_id` VARCHAR(40) NOT NULL,
  `issue_id` INT ZEROFILL NOT NULL,
  `action` VARCHAR(40) NOT NULL,
  `date` DATETIME NOT NULL,
  INDEX `fk_issue_history_user_id_idx` (`user_id` ASC),
  INDEX `fk_issue_history_issue_id_idx` (`issue_id` ASC),
  CONSTRAINT `fk_issue_history_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `ant`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_issue_history_issue_id`
    FOREIGN KEY (`issue_id`)
    REFERENCES `ant`.`issue` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ant`.`issue_attachment`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ant`.`issue_attachment` ;

CREATE TABLE IF NOT EXISTS `ant`.`issue_attachment` (
  `issue_id` INT ZEROFILL NOT NULL,
  `user_uploader` VARCHAR(40) NOT NULL,
  `filename_orig` VARCHAR(255) NOT NULL,
  `filename_real` VARCHAR(255) NOT NULL,
  `description` VARCHAR(255) NULL,
  INDEX `fk_issue_user_uploader_id_idx` (`user_uploader` ASC),
  PRIMARY KEY (`filename_real`),
  CONSTRAINT `fk_attachment_issue_id`
    FOREIGN KEY (`issue_id`)
    REFERENCES `ant`.`issue` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_issue_user_uploader_id`
    FOREIGN KEY (`user_uploader`)
    REFERENCES `ant`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ant`.`issue_tag`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ant`.`issue_tag` ;

CREATE TABLE IF NOT EXISTS `ant`.`issue_tag` (
  `issue_id` INT ZEROFILL NOT NULL,
  `tag_title` VARCHAR(40) NOT NULL,
  PRIMARY KEY (`issue_id`, `tag_title`),
  CONSTRAINT `fk_issue_tag_issue_id`
    FOREIGN KEY (`issue_id`)
    REFERENCES `ant`.`issue` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ant`.`project_release`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ant`.`project_release` ;

CREATE TABLE IF NOT EXISTS `ant`.`project_release` (
  `project_id` INT NOT NULL,
  `project_version` VARCHAR(10) NOT NULL,
  `release_date` DATETIME NOT NULL,
  PRIMARY KEY (`project_id`),
  CONSTRAINT `fk_project_release_project_id`
    FOREIGN KEY (`project_id`)
    REFERENCES `ant`.`project` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ant`.`settings`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ant`.`settings` ;

CREATE TABLE IF NOT EXISTS `ant`.`settings` (
  `setting_name` VARCHAR(40) NOT NULL,
  `setting_desc` VARCHAR(255) NULL,
  `setting_value` VARCHAR(255) NULL,
  PRIMARY KEY (`setting_name`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ant`.`relation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ant`.`relation` ;

CREATE TABLE IF NOT EXISTS `ant`.`relation` (
  `id` VARCHAR(40) NOT NULL,
  `description` VARCHAR(255) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ant`.`issue_relation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ant`.`issue_relation` ;

CREATE TABLE IF NOT EXISTS `ant`.`issue_relation` (
  `issue_orig_id` INT ZEROFILL NOT NULL,
  `issue_related_id` INT ZEROFILL NOT NULL,
  `relation_id` VARCHAR(40) NOT NULL,
  PRIMARY KEY (`issue_orig_id`, `issue_related_id`, `relation_id`),
  INDEX `fk_issue_relation_related_id_idx` (`issue_related_id` ASC),
  INDEX `fk_issue_relation_id_idx` (`relation_id` ASC),
  CONSTRAINT `fk_issue_relation_orig_id`
    FOREIGN KEY (`issue_orig_id`)
    REFERENCES `ant`.`issue` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_issue_relation_related_id`
    FOREIGN KEY (`issue_related_id`)
    REFERENCES `ant`.`issue` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_issue_relation_id`
    FOREIGN KEY (`relation_id`)
    REFERENCES `ant`.`relation` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `ant`;

DELIMITER $$

USE `ant`$$
DROP TRIGGER IF EXISTS `ant`.`issue_after_insert` $$
USE `ant`$$
CREATE DEFINER = CURRENT_USER TRIGGER `issue_after_insert` AFTER INSERT ON `issue` FOR EACH ROW
BEGIN
	INSERT INTO `issue_history`
    (
		`user_id`,
        `issue_id`,
        `action`,
        `date`
	)
    
    VALUES
    (
		NEW.`user_reporter`,
        NEW.`id`,
        'created',
        NOW()
    );
END$$


USE `ant`$$
DROP TRIGGER IF EXISTS `ant`.`issue_after_update` $$
USE `ant`$$
CREATE DEFINER = CURRENT_USER TRIGGER `issue_after_update` AFTER UPDATE ON `issue` FOR EACH ROW
BEGIN
	INSERT INTO `issue_history`
    (
		`user_id`,
        `issue_id`,
        `action`,
        `date`
	)
    
    VALUES
    (
		NEW.`user_last_update`,
        NEW.`id`,
        'updated',
        NOW()
    );
END$$


USE `ant`$$
DROP TRIGGER IF EXISTS `ant`.`issue_comment_after_insert` $$
USE `ant`$$
CREATE DEFINER = CURRENT_USER TRIGGER `issue_comment_after_insert` AFTER INSERT ON `issue_comment` FOR EACH ROW
BEGIN
	INSERT INTO `issue_history`
    (
		`user_id`,
        `issue_id`,
        `action`,
        `date`
	)
    
    VALUES
    (
		NEW.`user_id`,
        NEW.`issue_id`,
        'commented',
        NOW()
    );
END$$


USE `ant`$$
DROP TRIGGER IF EXISTS `ant`.`issue_attachment_after_insert` $$
USE `ant`$$
CREATE DEFINER = CURRENT_USER TRIGGER `issue_attachment_after_insert` AFTER INSERT ON `issue_attachment` FOR EACH ROW
BEGIN
	INSERT INTO `issue_history`
    (
		`user_id`,
        `issue_id`,
        `action`,
        `date`
	)
    
    VALUES
    (
		NEW.`user_uploader`,
        NEW.`issue_id`,
        'attached',
        NOW()
    );
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `ant`.`user_role`
-- -----------------------------------------------------
START TRANSACTION;
USE `ant`;
INSERT INTO `ant`.`user_role` (`id`, `name`, `description`) VALUES (DEFAULT, 'Viewer', 'Read only access.');
INSERT INTO `ant`.`user_role` (`id`, `name`, `description`) VALUES (DEFAULT, 'Reporter', 'Read and write access (issues only).');
INSERT INTO `ant`.`user_role` (`id`, `name`, `description`) VALUES (DEFAULT, 'Developer', 'Special read and write access for developers.');
INSERT INTO `ant`.`user_role` (`id`, `name`, `description`) VALUES (DEFAULT, 'Administrator', 'Administrative access.');
INSERT INTO `ant`.`user_role` (`id`, `name`, `description`) VALUES (DEFAULT, 'Manager', 'Full non restrictive access.');

COMMIT;


-- -----------------------------------------------------
-- Data for table `ant`.`issue_category`
-- -----------------------------------------------------
START TRANSACTION;
USE `ant`;
INSERT INTO `ant`.`issue_category` (`id`, `name`, `description`) VALUES (DEFAULT, 'New Feature', 'New feature');
INSERT INTO `ant`.`issue_category` (`id`, `name`, `description`) VALUES (DEFAULT, 'Enhancement', 'Enhancement for an already existent feature.');
INSERT INTO `ant`.`issue_category` (`id`, `name`, `description`) VALUES (DEFAULT, 'Bug Fix', 'Bug fix');

COMMIT;


-- -----------------------------------------------------
-- Data for table `ant`.`role_permission`
-- -----------------------------------------------------
START TRANSACTION;
USE `ant`;
INSERT INTO `ant`.`role_permission` (`id`, `description`) VALUES ('issue_view', 'View issues');
INSERT INTO `ant`.`role_permission` (`id`, `description`) VALUES ('issue_add', 'Add issues');
INSERT INTO `ant`.`role_permission` (`id`, `description`) VALUES ('issue_edit', 'Edit issues');
INSERT INTO `ant`.`role_permission` (`id`, `description`) VALUES ('issue_delete', 'Delete issues');
INSERT INTO `ant`.`role_permission` (`id`, `description`) VALUES ('issue_attachment_add', 'Upload issues attachments');
INSERT INTO `ant`.`role_permission` (`id`, `description`) VALUES ('issue_attachment_delete', 'Manage issues attachments');
INSERT INTO `ant`.`role_permission` (`id`, `description`) VALUES ('issue_comment', 'Add comments to issues');
INSERT INTO `ant`.`role_permission` (`id`, `description`) VALUES ('user_add', 'Create users');
INSERT INTO `ant`.`role_permission` (`id`, `description`) VALUES ('user_edit', 'Edit users');
INSERT INTO `ant`.`role_permission` (`id`, `description`) VALUES ('user_role_add', 'Create user roles');
INSERT INTO `ant`.`role_permission` (`id`, `description`) VALUES ('user_role_edit', 'Edit user roles');
INSERT INTO `ant`.`role_permission` (`id`, `description`) VALUES ('user_role_delete', 'Delete user roles');
INSERT INTO `ant`.`role_permission` (`id`, `description`) VALUES ('issue_category_add', 'Add issues categories');
INSERT INTO `ant`.`role_permission` (`id`, `description`) VALUES ('issue_category_edit', 'Edit issues categories');
INSERT INTO `ant`.`role_permission` (`id`, `description`) VALUES ('issue_category_delete', 'Delete issues categories');
INSERT INTO `ant`.`role_permission` (`id`, `description`) VALUES ('project_add', 'Create projects');
INSERT INTO `ant`.`role_permission` (`id`, `description`) VALUES ('project_edit', 'Edit projects');
INSERT INTO `ant`.`role_permission` (`id`, `description`) VALUES ('project_delete', 'Delete projects');

COMMIT;


-- -----------------------------------------------------
-- Data for table `ant`.`user_role_permission`
-- -----------------------------------------------------
START TRANSACTION;
USE `ant`;
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (1, 'issue_view');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (2, 'issue_view');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (2, 'issue_add');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (2, 'issue_attachment_add');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (2, 'issue_comment');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (3, 'issue_view');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (3, 'issue_comment');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (3, 'issue_edit');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (4, 'issue_view');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (4, 'issue_add');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (4, 'issue_edit');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (4, 'issue_attachment_add');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (4, 'issue_attachment_delete');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (4, 'issue_comment');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (4, 'user_edit');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (4, 'issue_category_add');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (4, 'issue_category_edit');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (4, 'issue_category_delete');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (5, 'issue_view');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (5, 'issue_add');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (5, 'issue_edit');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (5, 'issue_delete');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (5, 'issue_attachment_add');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (5, 'issue_attachment_delete');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (5, 'issue_comment');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (5, 'user_add');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (5, 'user_edit');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (5, 'user_role_add');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (5, 'user_role_edit');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (5, 'user_role_delete');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (5, 'issue_category_add');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (5, 'issue_category_edit');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (5, 'issue_category_delete');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (5, 'project_add');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (5, 'project_edit');
INSERT INTO `ant`.`user_role_permission` (`user_role_id`, `role_permission_id`) VALUES (5, 'project_delete');

COMMIT;


-- -----------------------------------------------------
-- Data for table `ant`.`issue_status`
-- -----------------------------------------------------
START TRANSACTION;
USE `ant`;
INSERT INTO `ant`.`issue_status` (`id`, `name`, `description`) VALUES (DEFAULT, 'Pending', 'Pending confirmation');
INSERT INTO `ant`.`issue_status` (`id`, `name`, `description`) VALUES (DEFAULT, 'Confirmed', 'Confirmed or replicated successfully');
INSERT INTO `ant`.`issue_status` (`id`, `name`, `description`) VALUES (DEFAULT, 'Dismissed', 'Not valid or no action needed');
INSERT INTO `ant`.`issue_status` (`id`, `name`, `description`) VALUES (DEFAULT, 'Assigned', 'Work in progress');
INSERT INTO `ant`.`issue_status` (`id`, `name`, `description`) VALUES (DEFAULT, 'Resolved', 'Considered properly implemented and/or fixed');
INSERT INTO `ant`.`issue_status` (`id`, `name`, `description`) VALUES (DEFAULT, 'Reopened', 'Provided resolution is incorrect');

COMMIT;


-- -----------------------------------------------------
-- Data for table `ant`.`issue_priority`
-- -----------------------------------------------------
START TRANSACTION;
USE `ant`;
INSERT INTO `ant`.`issue_priority` (`id`, `name`, `description`) VALUES (DEFAULT, 'Critical', 'Essential feature(s) not working, immediate attention needed');
INSERT INTO `ant`.`issue_priority` (`id`, `name`, `description`) VALUES (DEFAULT, 'Major', 'Key feature(s) impacted, immediate attention needed');
INSERT INTO `ant`.`issue_priority` (`id`, `name`, `description`) VALUES (DEFAULT, 'Normal', 'Causes minimal deviation from regular workflow');
INSERT INTO `ant`.`issue_priority` (`id`, `name`, `description`) VALUES (DEFAULT, 'Minor', 'Minor or insignificant impact on product requirement');

COMMIT;


-- -----------------------------------------------------
-- Data for table `ant`.`issue_resolution`
-- -----------------------------------------------------
START TRANSACTION;
USE `ant`;
INSERT INTO `ant`.`issue_resolution` (`id`, `name`, `description`) VALUES (DEFAULT, 'Unresolved', 'Issue is not resolved');
INSERT INTO `ant`.`issue_resolution` (`id`, `name`, `description`) VALUES (DEFAULT, 'Resolved', 'Issue is resolved');
INSERT INTO `ant`.`issue_resolution` (`id`, `name`, `description`) VALUES (DEFAULT, 'Won\'t Fix', 'Issue will not be fixed');
INSERT INTO `ant`.`issue_resolution` (`id`, `name`, `description`) VALUES (DEFAULT, 'Duplicate', 'Issue is a duplicate');
INSERT INTO `ant`.`issue_resolution` (`id`, `name`, `description`) VALUES (DEFAULT, 'Invalid', 'Report is invalid or missing information');
INSERT INTO `ant`.`issue_resolution` (`id`, `name`, `description`) VALUES (DEFAULT, 'Can\'t Replicate', 'Issue cannot be replicated');
INSERT INTO `ant`.`issue_resolution` (`id`, `name`, `description`) VALUES (DEFAULT, 'Implemented', 'New feature is completed');
INSERT INTO `ant`.`issue_resolution` (`id`, `name`, `description`) VALUES (DEFAULT, 'Postponed', 'Feature/Fix is delayed for a future date');
INSERT INTO `ant`.`issue_resolution` (`id`, `name`, `description`) VALUES (DEFAULT, 'Feedback', 'Additional feedback needed');

COMMIT;


-- -----------------------------------------------------
-- Data for table `ant`.`settings`
-- -----------------------------------------------------
START TRANSACTION;
USE `ant`;
INSERT INTO `ant`.`settings` (`setting_name`, `setting_desc`, `setting_value`) VALUES ('company_name', 'Your company name.', 'My Awesome Company');
INSERT INTO `ant`.`settings` (`setting_name`, `setting_desc`, `setting_value`) VALUES ('company_logo', 'Your company logo file name (Must exist on your upload_path).', '');
INSERT INTO `ant`.`settings` (`setting_name`, `setting_desc`, `setting_value`) VALUES ('upload_path', 'The path where attachmets will be stored.', '_/uploads/');
INSERT INTO `ant`.`settings` (`setting_name`, `setting_desc`, `setting_value`) VALUES ('application_url', 'The application URL as seen on your browser', '');
INSERT INTO `ant`.`settings` (`setting_name`, `setting_desc`, `setting_value`) VALUES ('items_home', 'The amount of items to display in the home page.', '25');
INSERT INTO `ant`.`settings` (`setting_name`, `setting_desc`, `setting_value`) VALUES ('items_browse', 'The amount of items to display when browsing issues.', '50');

COMMIT;

